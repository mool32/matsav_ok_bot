# scheduler_optimized.py - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏

import asyncio
import logging
import random
from datetime import datetime, time, timedelta
from typing import List, Dict, Optional
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram.error import TelegramError, Forbidden, ChatMigrated, RetryAfter
import time as time_module

from config import DAILY_NOTIFICATIONS
from database_optimized import optimized_db

logger = logging.getLogger(__name__)

class OptimizedNotificationScheduler:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, bot_application):
        self.bot = bot_application.bot
        self.scheduler = AsyncIOScheduler()
        self.notification_count = 0
        self.is_sending = False
        self.stats = {
            'total_sent': 0,
            'total_failed': 0,
            'last_batch_time': None,
            'average_batch_time': 0,
            'retry_queue_size': 0
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.batch_size = 50  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        self.batch_delay = 0.5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        self.message_delay = 0.03  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (30ms)
        self.max_retries = 3
        self.retry_delay = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        logger.info("üìÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        try:
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            self.schedule_daily_notifications()
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
            self.schedule_retry_failed_notifications()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler.start()
            
            logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
            logger.info(f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –±–∞—Ç—á {self.batch_size}, –∑–∞–¥–µ—Ä–∂–∫–∞ {self.batch_delay}—Å")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def schedule_daily_notifications(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
        time_slots = [
            (7, 9),    # –†–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ
            (9, 11),   # –£—Ç—Ä–æ
            (11, 13),  # –ü–æ–∑–¥–µ–µ —É—Ç—Ä–æ
            (13, 15),  # –û–±–µ–¥
            (15, 17),  # –î–µ–Ω—å
            (17, 19),  # –ü–æ–∑–¥–Ω–∏–π –¥–µ–Ω—å
            (19, 21),  # –í–µ—á–µ—Ä
            (21, 23),  # –ü–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä
        ]
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—ã–ª–æ–∫
        used_slots = random.sample(time_slots, min(DAILY_NOTIFICATIONS, len(time_slots)))
        
        for i, (start_hour, end_hour) in enumerate(used_slots):
            # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
            random_hour = random.randint(start_hour, end_hour - 1)
            random_minute = random.randint(0, 59)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            self.scheduler.add_job(
                self.send_batch_notification,
                trigger=CronTrigger(hour=random_hour, minute=random_minute),
                id=f"daily_notification_{i}",
                replace_existing=True,
                max_instances=1
            )
            
            logger.info(f"üìÖ –†–∞—Å—Å—ã–ª–∫–∞ #{i+1} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {random_hour:02d}:{random_minute:02d}")
    
    def schedule_retry_failed_notifications(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        self.scheduler.add_job(
            self.retry_failed_notifications,
            trigger=CronTrigger(minute='*/10'),  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            id="retry_failed_notifications",
            replace_existing=True,
            max_instances=1
        )
        
        logger.info("üîÑ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)")
    
    async def send_batch_notification(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–∞—Ç—á–∞–º–∏"""
        if self.is_sending:
            logger.warning("‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        self.is_sending = True
        start_time = time_module.time()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ—Ä–∞–∑—É
            users = await optimized_db.get_active_users()
            phrase = await optimized_db.get_random_phrase()
            
            if not users:
                logger.warning("üë• –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            if not phrase:
                logger.error("üí¨ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–∑—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏
            self.notification_count += 1
            total_users = len(users)
            
            logger.info(f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ #{self.notification_count} –Ω–∞—á–∞—Ç–∞")
            logger.info(f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users}")
            logger.info(f"üíå –§—Ä–∞–∑–∞: '{phrase[:50]}...'")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –±–∞—Ç—á–∏
            batches = [users[i:i + self.batch_size] for i in range(0, len(users), self.batch_size)]
            
            sent_count = 0
            failed_count = 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–∞–º–∏
            for batch_num, batch_users in enumerate(batches, 1):
                logger.info(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {batch_num}/{len(batches)} ({len(batch_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á
                batch_sent, batch_failed = await self._send_batch(batch_users, phrase)
                sent_count += batch_sent
                failed_count += batch_failed
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                if batch_num < len(batches):
                    await asyncio.sleep(self.batch_delay)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            elapsed_time = time_module.time() - start_time
            self.stats['total_sent'] += sent_count
            self.stats['total_failed'] += failed_count
            self.stats['last_batch_time'] = elapsed_time
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
            if self.stats['average_batch_time'] == 0:
                self.stats['average_batch_time'] = elapsed_time
            else:
                self.stats['average_batch_time'] = (self.stats['average_batch_time'] + elapsed_time) / 2
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ #{self.notification_count} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time:.1f}—Å")
            logger.info(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}")
            
            if sent_count > 0:
                logger.info(f"üéâ {sent_count} —á–µ–ª–æ–≤–µ–∫ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ—Ä—Ü–∏—é —Ç–µ–ø–ª–∞!")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
            
        finally:
            self.is_sending = False
    
    async def _send_batch(self, user_ids: List[int], phrase: str) -> tuple[int, int]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        sent_count = 0
        failed_count = 0
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        tasks = []
        for user_id in user_ids:
            task = asyncio.create_task(self._send_to_user(user_id, phrase))
            tasks.append(task)
        
        # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for user_id, result in zip(user_ids, results):
            if isinstance(result, Exception):
                failed_count += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {result}")
            elif result:
                sent_count += 1
            else:
                failed_count += 1
        
        return sent_count, failed_count
    
    async def _send_to_user(self, user_id: int, phrase: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=phrase
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            await optimized_db.log_notification(user_id, 0, 'sent')
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram
            await asyncio.sleep(self.message_delay)
            
            return True
            
        except Forbidden:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            await optimized_db.mark_user_inactive(user_id)
            logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            return False
            
        except RetryAfter as e:
            # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç - –∂–¥–µ–º
            wait_time = min(e.retry_after, 60)  # –ú–∞–∫—Å–∏–º—É–º –º–∏–Ω—É—Ç–∞
            logger.warning(f"‚è∞ Rate limit –¥–ª—è {user_id}, –∂–¥–µ–º {wait_time}—Å")
            await asyncio.sleep(wait_time)
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
            try:
                await self.bot.send_message(chat_id=user_id, text=phrase)
                await optimized_db.log_notification(user_id, 0, 'sent')
                return True
            except Exception as retry_error:
                await optimized_db.log_notification(user_id, 0, 'failed', str(retry_error))
                return False
            
        except ChatMigrated as e:
            # –ß–∞—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª - –æ–±–Ω–æ–≤–ª—è–µ–º ID
            new_chat_id = e.new_chat_id
            logger.info(f"üì± –ß–∞—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª: {user_id} -> {new_chat_id}")
            return False
            
        except TelegramError as e:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ Telegram
            error_msg = str(e)
            await optimized_db.log_notification(user_id, 0, 'failed', error_msg)
            
            if "blocked" in error_msg.lower():
                await optimized_db.mark_user_inactive(user_id)
            
            return False
            
        except Exception as e:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            await optimized_db.log_notification(user_id, 0, 'failed', str(e))
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")
            return False
    
    async def retry_failed_notifications(self):
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ë–î
            # –∏ –∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            logger.debug("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    async def send_test_notification(self, user_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            phrase = await optimized_db.get_random_phrase()
            test_message = f"üß™ –¢–ï–°–¢: {phrase}"
            
            success = await self._send_to_user(user_id, test_message)
            
            if success:
                logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def schedule_test_notification(self, minutes_from_now: int = 1) -> str:
        """–ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        from datetime import datetime, timedelta
        
        test_time = datetime.now() + timedelta(minutes=minutes_from_now)
        
        self.scheduler.add_job(
            self.send_batch_notification,
            trigger=CronTrigger(
                hour=test_time.hour,
                minute=test_time.minute
            ),
            id="test_notification_scheduled",
            replace_existing=True,
            max_instances=1
        )
        
        time_str = test_time.strftime('%H:%M')
        logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {time_str}")
        return time_str
    
    def get_next_notifications(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            jobs = self.scheduler.get_jobs()
            next_times = []
            
            for job in jobs:
                if job.id.startswith("daily_notification") or "test" in job.id:
                    if job.next_run_time:
                        next_times.append(job.next_run_time.strftime("%H:%M"))
            
            return sorted(next_times)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return []
    
    def reschedule_notifications(self):
        """–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
            for job in self.scheduler.get_jobs():
                if job.id.startswith("daily_notification"):
                    job.remove()
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
            self.schedule_daily_notifications()
            
            logger.info("üîÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        return {
            "total_notifications": self.notification_count,
            "scheduled_jobs": len([j for j in self.scheduler.get_jobs() if j.id.startswith("daily_notification")]),
            "is_running": self.scheduler.running,
            "is_sending": self.is_sending,
            "total_sent": self.stats['total_sent'],
            "total_failed": self.stats['total_failed'],
            "last_batch_time": self.stats['last_batch_time'],
            "average_batch_time": round(self.stats['average_batch_time'], 2),
            "retry_queue_size": self.stats['retry_queue_size'],
            "batch_size": self.batch_size
        }
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        try:
            self.scheduler.shutdown(wait=False)
            logger.info("üõë –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
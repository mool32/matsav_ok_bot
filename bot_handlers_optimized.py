# bot_handlers_optimized.py - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è

import logging
import re
import asyncio
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

from config import (
    WELCOME_MESSAGE, PHRASE_REQUEST_MESSAGE, PHRASE_THANKS_MESSAGE,
    MAX_MESSAGE_LENGTH, MESSAGE_COOLDOWN, STOP_WORDS, ADMIN_ID
)
from database_optimized import optimized_db
from security import security_manager

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_states = {}
user_cooldowns = {}
global_scheduler = None

# –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
BUTTON_GET_PHRASE = "üíå –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
BUTTON_SHARE_PHRASE = "üå± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º"

def set_global_scheduler(scheduler):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    global global_scheduler
    global_scheduler = scheduler
    logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [KeyboardButton(BUTTON_GET_PHRASE)],
        [KeyboardButton(BUTTON_SHARE_PHRASE)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def is_on_cooldown(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_cooldowns:
        return False
    
    time_passed = datetime.now() - user_cooldowns[user_id]
    return time_passed.total_seconds() < MESSAGE_COOLDOWN

def set_cooldown(user_id: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cooldown"""
    user_cooldowns[user_id] = datetime.now()

def contains_stop_words(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞"""
    text_lower = text.lower()
    for stop_word in STOP_WORDS:
        if stop_word in text_lower:
            logger.warning(f"üö´ –°—Ç–æ–ø-—Å–ª–æ–≤–æ '{stop_word}' –≤ —Ç–µ–∫—Å—Ç–µ")
            return True
    return False

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info(f"üë§ {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª /start")
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–∑—É
    add_user_task = optimized_db.add_user(user_id, username)
    get_phrase_task = optimized_db.get_random_phrase()
    
    # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–µ–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await add_user_task
    phrase = await get_phrase_task
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = "main_menu"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—É –∏ –∫–Ω–æ–ø–∫–∏
    await update.message.reply_text(phrase)
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {username}")

async def get_warmth_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info(f"‚ú® {username} (ID: {user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ—Ä–∞–∑—É")
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–∑—É –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î
    phrase = await optimized_db.get_random_phrase()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—É
    await update.message.reply_text(
        phrase,
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"‚úÖ –§—Ä–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {username}")

async def share_phrase_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ—Ä–∞–∑–æ–π"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info(f"üíù {username} (ID: {user_id}) —Ö–æ—á–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
    if is_on_cooldown(user_id):
        remaining_time = MESSAGE_COOLDOWN - (datetime.now() - user_cooldowns[user_id]).total_seconds()
        remaining_minutes = int(remaining_time // 60)
        
        await update.message.reply_text(
            f"‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {remaining_minutes} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑—ã.",
            reply_markup=get_main_keyboard()
        )
        
        logger.info(f"‚è∞ {username} –Ω–∞ cooldown")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    user_states[user_id] = "waiting_phrase"
    
    await update.message.reply_text(
        PHRASE_REQUEST_MESSAGE,
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å–∏–ª–∏ —Ñ—Ä–∞–∑—É —É {username}")

async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    message_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–±—ã—Å—Ç—Ä—ã–µ, –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ)
    if security_manager.is_user_blocked(user_id):
        logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
        return
    
    if not security_manager.check_rate_limit(user_id, 'message'):
        await update.message.reply_text(
            "‚è∞ –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ."
        )
        logger.warning(f"‚ö†Ô∏è {username} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
    security_manager.log_user_action(user_id, 'message', message_text)
    
    logger.info(f"üí¨ {username}: '{message_text[:50]}...'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_id not in user_states:
        user_states[user_id] = "main_menu"
    
    current_state = user_states[user_id]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (–º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)
    if message_text == BUTTON_GET_PHRASE:
        await get_warmth_handler(update, context)
        
    elif message_text == BUTTON_SHARE_PHRASE:
        await share_phrase_handler(update, context)
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ—Ä–∞–∑—ã
    elif current_state == "waiting_phrase":
        await process_user_phrase(update, context, message_text, user_id, username)
        
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üòä",
            reply_markup=get_main_keyboard()
        )

async def process_user_phrase(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                            phrase: str, user_id: int, username: str):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ñ—Ä–∞–∑—ã"""
    
    # –ë—ã—Å—Ç—Ä—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–Ω–∞—á–∞–ª–∞
    if len(phrase) > MAX_MESSAGE_LENGTH:
        await update.message.reply_text(
            f"üìù –§—Ä–∞–∑–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è! –ú–∞–∫—Å–∏–º—É–º {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤ (–±—ã—Å—Ç—Ä–∞—è)
    if contains_stop_words(phrase):
        await update.message.reply_text(
            "üòî –§—Ä–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ-—Ç–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ.",
            reply_markup=get_main_keyboard()
        )
        user_states[user_id] = "main_menu"
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ (–±—ã—Å—Ç—Ä–∞—è)
    if re.search(r'http[s]?://|www\.|\w+\.\w+', phrase):
        await update.message.reply_text(
            "üîó –§—Ä–∞–∑—ã –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Å—ã–ª–∫–∏.",
            reply_markup=get_main_keyboard()
        )
        user_states[user_id] = "main_menu"
        return
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    moderation_result = security_manager.auto_moderate_phrase(user_id, phrase)
    
    if not moderation_result['allowed']:
        await update.message.reply_text(
            f"üòî {moderation_result['reason']}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.",
            reply_markup=get_main_keyboard()
        )
        
        # –ê–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
        if moderation_result.get('auto_block'):
            security_manager.block_user(user_id, moderation_result['reason'])
        
        user_states[user_id] = "main_menu"
        return
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∑—É –≤ –ë–î
    success = await optimized_db.save_user_phrase(user_id, username, phrase)
    
    if success:
        await update.message.reply_text(
            PHRASE_THANKS_MESSAGE,
            reply_markup=get_main_keyboard()
        )
        logger.info(f"‚úÖ –§—Ä–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—Ç {username}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cooldown
        set_cooldown(user_id)
        
    else:
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.",
            reply_markup=get_main_keyboard()
        )
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç {username}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = "main_menu"

# –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é admin_stats_command –≤ bot_handlers_optimized.py
# –°—Ç—Ä–æ–∫–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ 250-310

async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if user_id != ADMIN_ID:
        logger.warning(f"üö´ –ù–µ-–∞–¥–º–∏–Ω {username} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    db_stats_task = optimized_db.get_stats()
    scheduler_stats = global_scheduler.get_stats() if global_scheduler else {}
    security_stats = security_manager.get_security_stats()
    
    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_stats = await db_stats_task
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    last_batch_time = scheduler_stats.get('last_batch_time')
    if last_batch_time is not None:
        batch_time_str = f"{last_batch_time:.1f}—Å"
    else:
        batch_time_str = "–µ—â—ë –Ω–µ –±—ã–ª–æ"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    stats_message = f"""üëë **–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**

üìä **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite):**
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db_stats.get('active_users', 0)}
üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db_stats.get('total_users', 0)}
üåû –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∑: {db_stats.get('active_phrases', 0)}
‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {db_stats.get('pending_phrases', 0)}
üìà –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ 24—á: {db_stats.get('notifications_24h', 0)}
‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {db_stats.get('failed_notifications', 0)}
üíæ –ö—ç—à —Ñ—Ä–∞–∑: {db_stats.get('cache_size', 0)}

üîî **–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–ë–∞—Ç—á–∏–Ω–≥):**
üì§ –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {scheduler_stats.get('total_notifications', 0)}
‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {scheduler_stats.get('total_sent', 0)}
‚ùå –û—à–∏–±–æ–∫: {scheduler_stats.get('total_failed', 0)}
‚è±Ô∏è –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {batch_time_str}
üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {scheduler_stats.get('batch_size', 0)}
‚ñ∂Ô∏è –°—Ç–∞—Ç—É—Å: {'–†–∞–±–æ—Ç–∞–µ—Ç' if scheduler_stats.get('is_running') else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ–π—á–∞—Å: {'–î–∞' if scheduler_stats.get('is_sending') else '–ù–µ—Ç'}

üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {security_stats.get('blocked_users', 0)}
üëÅÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {security_stats.get('active_users_tracked', 0)}

üöÄ **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
–ü–æ–¥–¥–µ—Ä–∂–∫–∞: 10,000+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–°–∫–æ—Ä–æ—Å—Ç—å: 1000+ —Å–æ–æ–±—â–µ–Ω–∏–π/–º–∏–Ω—É—Ç—É
–¢–∏–ø –ë–î: SQLite —Å WAL —Ä–µ–∂–∏–º–æ–º

üîß **–ö–æ–º–∞–Ω–¥—ã:**
/admin - —ç—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/test_notification - —Ç–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω—É
/test_soon - —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
/reschedule - –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    await update.message.reply_text(stats_message)
    logger.info("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

async def admin_test_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {username} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ—Å—Ç")
    
    if global_scheduler is not None:
        try:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            success = await global_scheduler.send_test_notification(user_id)
            
            if success:
                await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                logger.info("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                logger.error("‚ùå –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ test_notification: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        await update.message.reply_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

async def admin_test_soon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {username} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É")
    
    if global_scheduler is not None:
        try:
            test_time = global_scheduler.schedule_test_notification(minutes_from_now=1)
            await update.message.reply_text(
                f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è –ë–ê–¢–ß-—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {test_time}\n"
                f"üì¶ –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            )
            logger.info(f"‚úÖ –¢–µ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {test_time}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        await update.message.reply_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

async def admin_reschedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {username} –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
    
    if global_scheduler is not None:
        try:
            global_scheduler.reschedule_notifications()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            next_times = global_scheduler.get_next_notifications()
            
            await update.message.reply_text(
                f"üîÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–∞—Ç—á-—Ä–∞—Å—Å—ã–ª–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"‚è∞ –ù–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞: {', '.join(next_times[:5])}\n"
                f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {global_scheduler.batch_size} —Å–æ–æ–±—â–µ–Ω–∏–π"
            )
            logger.info("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        await update.message.reply_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
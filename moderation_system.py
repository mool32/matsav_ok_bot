# moderation_system.py - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞

import asyncio
import aiosqlite
import logging
import re
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler

from config import ADMIN_ID, STOP_WORDS

logger = logging.getLogger(__name__)

class ModerationSystem:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∑"""
    
    def __init__(self, db_path: str = "data/matsav_tov.db"):
        self.db_path = db_path
        self.current_moderation_session = {}  # user_id -> session_data
        
    async def get_pending_phrases(self, limit: int = 10, offset: int = 0) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–∑—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                cursor = await db.execute("""
                    SELECT p.id, p.text, p.created_at, p.user_id, u.username
                    FROM phrases p
                    LEFT JOIN users u ON p.user_id = u.user_id
                    WHERE p.status = 'pending'
                    ORDER BY p.created_at ASC
                    LIMIT ? OFFSET ?
                """, (limit, offset))
                
                phrases = await cursor.fetchall()
                
                return [
                    {
                        'id': phrase[0],
                        'text': phrase[1],
                        'created_at': phrase[2],
                        'user_id': phrase[3],
                        'username': phrase[4] or f"User_{phrase[3]}"
                    }
                    for phrase in phrases
                ]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä–∞–∑ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            return []
    
    async def get_moderation_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –í—Å–µ–≥–æ —Ñ—Ä–∞–∑ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                cursor = await db.execute("SELECT COUNT(*) FROM phrases WHERE status = 'pending'")
                pending_count = (await cursor.fetchone())[0]
                
                # –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor = await db.execute("SELECT COUNT(*) FROM phrases WHERE status = 'active' AND source = 'user'")
                approved_count = (await cursor.fetchone())[0]
                
                # –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
                cursor = await db.execute("SELECT COUNT(*) FROM phrases WHERE status = 'rejected'")
                rejected_count = (await cursor.fetchone())[0]
                
                # –§—Ä–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                cursor = await db.execute("""
                    SELECT COUNT(*) FROM phrases 
                    WHERE created_at > datetime('now', '-1 day') AND source = 'user'
                """)
                phrases_24h = (await cursor.fetchone())[0]
                
                # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ—Ä–∞–∑–∞–º
                cursor = await db.execute("""
                    SELECT u.username, COUNT(*) as phrase_count
                    FROM phrases p
                    JOIN users u ON p.user_id = u.user_id
                    WHERE p.source = 'user'
                    GROUP BY p.user_id
                    ORDER BY phrase_count DESC
                    LIMIT 5
                """)
                top_contributors = await cursor.fetchall()
                
                return {
                    'pending': pending_count,
                    'approved': approved_count,
                    'rejected': rejected_count,
                    'phrases_24h': phrases_24h,
                    'top_contributors': [(user[0], user[1]) for user in top_contributors]
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    async def approve_phrase(self, phrase_id: int, admin_id: int) -> bool:
        """–û–¥–æ–±—Ä—è–µ–º —Ñ—Ä–∞–∑—É"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—Ä–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                cursor = await db.execute(
                    "SELECT text, user_id FROM phrases WHERE id = ? AND status = 'pending'",
                    (phrase_id,)
                )
                phrase_data = await cursor.fetchone()
                
                if not phrase_data:
                    logger.warning(f"‚ö†Ô∏è –§—Ä–∞–∑–∞ {phrase_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                    return False
                
                # –û–¥–æ–±—Ä—è–µ–º —Ñ—Ä–∞–∑—É
                await db.execute(
                    "UPDATE phrases SET status = 'active' WHERE id = ?",
                    (phrase_id,)
                )
                
                await db.commit()
                
                phrase_text, user_id = phrase_data
                logger.info(f"‚úÖ –ê–¥–º–∏–Ω {admin_id} –æ–¥–æ–±—Ä–∏–ª —Ñ—Ä–∞–∑—É {phrase_id}: '{phrase_text[:50]}...' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã {phrase_id}: {e}")
            return False
    
    async def reject_phrase(self, phrase_id: int, admin_id: int, reason: str = "") -> bool:
        """–û—Ç–∫–ª–æ–Ω—è–µ–º —Ñ—Ä–∞–∑—É"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—Ä–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                cursor = await db.execute(
                    "SELECT text, user_id FROM phrases WHERE id = ? AND status = 'pending'",
                    (phrase_id,)
                )
                phrase_data = await cursor.fetchone()
                
                if not phrase_data:
                    logger.warning(f"‚ö†Ô∏è –§—Ä–∞–∑–∞ {phrase_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
                    return False
                
                # –û—Ç–∫–ª–æ–Ω—è–µ–º —Ñ—Ä–∞–∑—É
                await db.execute(
                    "UPDATE phrases SET status = 'rejected' WHERE id = ?",
                    (phrase_id,)
                )
                
                await db.commit()
                
                phrase_text, user_id = phrase_data
                logger.info(f"‚ùå –ê–¥–º–∏–Ω {admin_id} –æ—Ç–∫–ª–æ–Ω–∏–ª —Ñ—Ä–∞–∑—É {phrase_id}: '{phrase_text[:50]}...' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã {phrase_id}: {e}")
            return False
    
    async def auto_approve_quality_phrases(self) -> int:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã"""
        try:
            pending_phrases = await self.get_pending_phrases(limit=100)
            approved_count = 0
            
            for phrase in pending_phrases:
                if self._is_high_quality_phrase(phrase['text']):
                    success = await self.approve_phrase(phrase['id'], 0)  # 0 = –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è
                    if success:
                        approved_count += 1
            
            logger.info(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–æ {approved_count} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑")
            return approved_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}")
            return 0
    
    def _is_high_quality_phrase(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏—è"""
        # –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if len(text) < 10 or len(text) > 200:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        text_lower = text.lower()
        for stop_word in STOP_WORDS:
            if stop_word in text_lower:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏
        if re.search(r'http[s]?://|www\.|\w+\.\w+', text):
            return False
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
        quality_markers = [
            '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '—Å–∏–ª–∞', '–ª—é–±–æ–≤—å', '–¥—Ä—É–∂–±–∞',
            '–Ω–∞–¥–µ–∂–¥–∞', '–≤–µ—Ä–∞', '–º–∏—Ä', '–¥–æ–±—Ä–æ', '—Å—á–∞—Å—Ç—å–µ', '—Ä–∞–¥–æ—Å—Ç—å', '—Å–≤–µ—Ç',
            '—Ç–µ–ø–ª–æ', '—É–ª—ã–±–∫–∞', '–æ–±–Ω–∏–º–∞—é', '–±—É–¥–µ—Ç –ª—É—á—à–µ', '–Ω–µ —Å–¥–∞–≤–∞–π—Å—è',
            '–¥–µ—Ä–∂–∏—Å—å', '—Å–ø—Ä–∞–≤–∏—à—å—Å—è', '–≤–µ—Ä—é –≤ —Ç–µ–±—è', '—Ç—ã —Å–∏–ª—å–Ω—ã–π', '–ø—Ä–æ–π–¥–µ—Ç'
        ]
        
        positive_score = sum(1 for marker in quality_markers if marker in text_lower)
        
        # –ê–≤—Ç–æ–æ–¥–æ–±—Ä—è–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
        return positive_score >= 2
    
    def create_moderation_keyboard(self, phrase_id: int, current_index: int, total_count: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"mod_approve_{phrase_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mod_reject_{phrase_id}")
            ],
            [
                InlineKeyboardButton("‚è™ –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"mod_prev_{current_index}"),
                InlineKeyboardButton(f"{current_index + 1}/{total_count}", callback_data="mod_noop"),
                InlineKeyboardButton("‚è© –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"mod_next_{current_index}")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="mod_stats"),
                InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–æ–¥–æ–±—Ä–∏—Ç—å", callback_data="mod_auto_approve"),
                InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="mod_close")
            ]
        ]
        
        return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ bot_handlers_optimized.py

async def admin_moderate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∑"""
    user = update.effective_user
    user_id = user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    moderation = ModerationSystem()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–∑—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    pending_phrases = await moderation.get_pending_phrases(limit=1)
    
    if not pending_phrases:
        await update.message.reply_text("üéâ –ù–µ—Ç —Ñ—Ä–∞–∑ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏!")
        return
    
    phrase = pending_phrases[0]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    moderation.current_moderation_session[user_id] = {
        'current_index': 0,
        'total_count': len(await moderation.get_pending_phrases(limit=1000))  # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"""üìù **–ú–û–î–ï–†–ê–¶–ò–Ø –§–†–ê–ó–´ #{phrase['id']}**

üë§ **–û—Ç:** {phrase['username']} (ID: {phrase['user_id']})
üìÖ **–î–∞—Ç–∞:** {phrase['created_at']}

üí¨ **–¢–µ–∫—Å—Ç:**
"{phrase['text']}"

üîç **–ê–Ω–∞–ª–∏–∑:**
‚Ä¢ –î–ª–∏–Ω–∞: {len(phrase['text'])} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫–∏: {'–î–∞' if re.search(r'http[s]?://|www\.', phrase['text']) else '–ù–µ—Ç'}
‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: {'–î–∞' if any(word in phrase['text'].lower() for word in STOP_WORDS) else '–ù–µ—Ç'}"""
    
    keyboard = moderation.create_moderation_keyboard(phrase['id'], 0, moderation.current_moderation_session[user_id]['total_count'])
    
    await update.message.reply_text(
        message_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {user.first_name} –Ω–∞—á–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é")

async def admin_moderation_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    user = update.effective_user
    user_id = user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    moderation = ModerationSystem()
    stats = await moderation.get_moderation_stats()
    
    message = f"""üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–î–ï–†–ê–¶–ò–ò**

üìã **–§—Ä–∞–∑—ã:**
‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {stats.get('pending', 0)}
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats.get('approved', 0)}
‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats.get('rejected', 0)}
‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {stats.get('phrases_24h', 0)}

üë• **–¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ —Ñ—Ä–∞–∑:**"""
    
    for i, (username, count) in enumerate(stats.get('top_contributors', []), 1):
        message += f"\n{i}. {username}: {count} —Ñ—Ä–∞–∑"
    
    if not stats.get('top_contributors'):
        message += "\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    await update.message.reply_text(message, parse_mode='Markdown')

async def admin_auto_approve_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑"""
    user = update.effective_user
    user_id = user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await update.message.reply_text("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ...")
    
    moderation = ModerationSystem()
    approved_count = await moderation.auto_approve_quality_phrases()
    
    await update.message.reply_text(
        f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–æ {approved_count} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑!"
    )
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {user.first_name} –∑–∞–ø—É—Å—Ç–∏–ª –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ: {approved_count} —Ñ—Ä–∞–∑")

async def moderation_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    
    if user_id != ADMIN_ID:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await query.answer()
    
    data = query.data
    moderation = ModerationSystem()
    
    try:
        if data.startswith("mod_approve_"):
            phrase_id = int(data.split("_")[2])
            success = await moderation.approve_phrase(phrase_id, user_id)
            
            if success:
                await query.edit_message_text("‚úÖ –§—Ä–∞–∑–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ñ—Ä–∞–∑—ã.")
        
        elif data.startswith("mod_reject_"):
            phrase_id = int(data.split("_")[2])
            success = await moderation.reject_phrase(phrase_id, user_id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º")
            
            if success:
                await query.edit_message_text("‚ùå –§—Ä–∞–∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ñ—Ä–∞–∑—ã.")
        
        elif data == "mod_stats":
            stats = await moderation.get_moderation_stats()
            stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {stats.get('pending', 0)}
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats.get('approved', 0)}
‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats.get('rejected', 0)}"""
            
            await query.edit_message_text(stats_text)
        
        elif data == "mod_auto_approve":
            await query.edit_message_text("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏—è...")
            approved_count = await moderation.auto_approve_quality_phrases()
            await query.edit_message_text(f"‚úÖ –ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–æ: {approved_count} —Ñ—Ä–∞–∑")
        
        elif data == "mod_close":
            await query.edit_message_text("‚ùå –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Ñ—Ä–∞–∑–∞–º–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ main_optimized.py
def setup_moderation_handlers(application):
    """–î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    from telegram.ext import CommandHandler, CallbackQueryHandler
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("moderate", admin_moderate_command))
    application.add_handler(CommandHandler("mod_stats", admin_moderation_stats_command))
    application.add_handler(CommandHandler("auto_approve", admin_auto_approve_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(moderation_callback_handler, pattern=r"^mod_"))
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
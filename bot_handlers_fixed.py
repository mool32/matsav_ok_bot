# bot_handlers_fixed.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π

import logging
import re
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

from config import (
    WELCOME_MESSAGE, PHRASE_REQUEST_MESSAGE, PHRASE_THANKS_MESSAGE,
    MAX_MESSAGE_LENGTH, MESSAGE_COOLDOWN, STOP_WORDS, ADMIN_ID
)
from database import (
    get_random_phrase, save_user_phrase, add_user, 
    get_phrases_count, get_pending_phrases_count, get_all_users
)
from moderation import (
    get_pending_phrases, format_pending_phrases_for_admin, 
    approve_phrase, reject_phrase, get_moderation_stats,
    get_top_contributors, batch_approve_pending
)
from matsav_tov_bot.security import security_manager

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_states = {}
user_cooldowns = {}
global_scheduler = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

def set_global_scheduler(scheduler):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    global global_scheduler
    global_scheduler = scheduler
    logger.info("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton("üåû –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ü–∏—é —Ç–µ–ø–ª–∞")],
        [KeyboardButton("üíå –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π —Ñ—Ä–∞–∑–æ–π")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def is_on_cooldown(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ cooldown –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    if user_id not in user_cooldowns:
        return False
    
    time_passed = datetime.now() - user_cooldowns[user_id]
    return time_passed.total_seconds() < MESSAGE_COOLDOWN

def set_cooldown(user_id: int):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cooldown –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_cooldowns[user_id] = datetime.now()

def contains_stop_words(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤–∞"""
    text_lower = text.lower()
    for stop_word in STOP_WORDS:
        if stop_word in text_lower:
            logger.warning(f"üö´ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ '{stop_word}' –≤ —Ç–µ–∫—Å—Ç–µ: '{text[:30]}...'")
            return True
    return False

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info(f"üë§ {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    add_user(user_id, username)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = "main_menu"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        WELCOME_MESSAGE,
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")

async def get_warmth_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ü–∏—é —Ç–µ–ø–ª–∞'"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info(f"üåû {username} (ID: {user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ—Ä—Ü–∏—é —Ç–µ–ø–ª–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
    phrase = get_random_phrase()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—É
    await update.message.reply_text(
        f"üì¢ ◊û◊¶◊ë ◊ò◊ï◊ë: {phrase}",
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")

async def share_phrase_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π —Ñ—Ä–∞–∑–æ–π'"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info(f"üíå {username} (ID: {user_id}) —Ö–æ—á–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ—Ä–∞–∑–æ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
    if is_on_cooldown(user_id):
        remaining_time = MESSAGE_COOLDOWN - (datetime.now() - user_cooldowns[user_id]).total_seconds()
        remaining_minutes = int(remaining_time // 60)
        
        await update.message.reply_text(
            f"‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {remaining_minutes} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑—ã.",
            reply_markup=get_main_keyboard()
        )
        
        logger.info(f"‚è∞ {username} –Ω–∞ cooldown, –æ—Å—Ç–∞–ª–æ—Å—å {remaining_minutes} –º–∏–Ω—É—Ç")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã
    user_states[user_id] = "waiting_phrase"
    
    await update.message.reply_text(
        PHRASE_REQUEST_MESSAGE,
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å–∏–ª–∏ —Ñ—Ä–∞–∑—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    message_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if security_manager.is_user_blocked(user_id):
        logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –ø—ã—Ç–∞–ª—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    if not security_manager.check_rate_limit(user_id, 'message'):
        await update.message.reply_text(
            "‚è∞ –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        logger.warning(f"‚ö†Ô∏è {username} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    security_manager.log_user_action(user_id, 'message', message_text)
    
    logger.info(f"üí¨ {username} (ID: {user_id}) –ø—Ä–∏—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message_text[:50]}...'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_states:
        user_states[user_id] = "main_menu"
    
    current_state = user_states[user_id]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if message_text == "üåû –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ü–∏—é —Ç–µ–ø–ª–∞":
        await get_warmth_handler(update, context)
        
    elif message_text == "üíå –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π —Ñ—Ä–∞–∑–æ–π":
        await share_phrase_handler(update, context)
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ—Ä–∞–∑—ã
    elif current_state == "waiting_phrase":
        await process_user_phrase(update, context, message_text, user_id, username)
        
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üòä",
            reply_markup=get_main_keyboard()
        )
        
        logger.info(f"‚ùì {username} –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")

async def process_user_phrase(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                            phrase: str, user_id: int, username: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ—Ä–∞–∑—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ñ—Ä–∞–∑—ã
    security_check = security_manager.auto_moderate_phrase(user_id, phrase)
    
    if not security_check['allowed']:
        # –§—Ä–∞–∑–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        reason = security_check['reason']
        
        if security_check['auto_block']:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            security_manager.block_user(user_id, f"–ê–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {reason}")
            
            await update.message.reply_text(
                "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
                reply_markup=get_main_keyboard()
            )
            
            logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}): {reason}")
            return
        
        else:
            # –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª–æ–Ω—è–µ–º —Ñ—Ä–∞–∑—É
            await update.message.reply_text(
                f"üòî –§—Ä–∞–∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {reason}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∏ –ø—Ä–æ—Å—Ç–æ–µ.",
                reply_markup=get_main_keyboard()
            )
            
            logger.warning(f"‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Ñ—Ä–∞–∑–∞ –æ—Ç {username}: {reason}")
            user_states[user_id] = "main_menu"
            return
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏–Ω—ã
    if len(phrase) > MAX_MESSAGE_LENGTH:
        await update.message.reply_text(
            f"üìù –§—Ä–∞–∑–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è! –ú–∞–∫—Å–∏–º—É–º {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. "
            f"–£ –≤–∞—Å {len(phrase)} —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_main_keyboard()
        )
        
        logger.info(f"üìè {username} –ø—Ä–∏—Å–ª–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—É—é —Ñ—Ä–∞–∑—É: {len(phrase)} —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    if contains_stop_words(phrase):
        await update.message.reply_text(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ —Ñ—Ä–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ–≤–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ.",
            reply_markup=get_main_keyboard()
        )
        
        logger.warning(f"üö´ {username} –ø—Ä–∏—Å–ª–∞–ª —Ñ—Ä–∞–∑—É —Å–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞–º–∏")
        user_states[user_id] = "main_menu"
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Å—ã–ª–∫–∏
    if re.search(r'http[s]?://|www\.|\w+\.\w+', phrase):
        await update.message.reply_text(
            "üîó –§—Ä–∞–∑—ã –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Å—ã–ª–∫–∏. "
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–æ—Å—Ç–æ –¥–æ–±—Ä—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.",
            reply_markup=get_main_keyboard()
        )
        
        logger.warning(f"üîó {username} –ø—Ä–∏—Å–ª–∞–ª —Ñ—Ä–∞–∑—É —Å–æ —Å—Å—ã–ª–∫–∞–º–∏")
        user_states[user_id] = "main_menu"
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∑—É
    if save_user_phrase(user_id, username, phrase):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if security_check['suspicion_level'] > 0:
            await update.message.reply_text(
                "üìù –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ—Ä–∞–∑—É! –û–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ.",
                reply_markup=get_main_keyboard()
            )
            logger.info(f"üìù –§—Ä–∞–∑–∞ –æ—Ç {username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ–º (—É—Ä–æ–≤–µ–Ω—å {security_check['suspicion_level']})")
        else:
            await update.message.reply_text(
                PHRASE_THANKS_MESSAGE,
                reply_markup=get_main_keyboard()
            )
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ñ—Ä–∞–∑—É –æ—Ç {username}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cooldown
        set_cooldown(user_id)
        
    else:
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã –æ—Ç {username}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = "main_menu"

async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if user_id != ADMIN_ID:
        logger.warning(f"üö´ –ù–µ-–∞–¥–º–∏–Ω {username} (ID: {user_id}) –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    phrases_count = get_phrases_count()
    pending_count = get_pending_phrases_count()
    users_count = len(get_all_users())
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler_info = ""
    logger.info(f"üîç global_scheduler —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ admin_stats: {global_scheduler is not None}")
    
    if global_scheduler is not None:
        stats = global_scheduler.get_stats()
        next_times = global_scheduler.get_next_notifications()
        
        scheduler_info = f"""
üîî **–†–∞—Å—Å—ã–ª–∫–∞:**
üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {stats['total_notifications']}
‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['scheduled_jobs']}
‚ñ∂Ô∏è –°—Ç–∞—Ç—É—Å: {'–†–∞–±–æ—Ç–∞–µ—Ç' if stats['is_running'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üïê –°–ª–µ–¥—É—é—â–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {', '.join(next_times[:3]) if next_times else '–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã'}"""
    else:
        scheduler_info = f"""
üîî **–†–∞—Å—Å—ã–ª–∫–∞:**
‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    
    stats_message = f"""üëë **–ê–î–ú–ò–ù –°–¢–ê–¢–ò–°–¢–ò–ö–ê**
    
üìä **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
üåû –§—Ä–∞–∑ –≤ —Ä–æ—Ç–∞—Ü–∏–∏: {phrases_count}
‚è≥ –ñ–¥—É—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {pending_count}
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}{scheduler_info}

üîß **–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:**
/admin - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/test_notification - —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
/reschedule - –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏

üìÅ **–§–∞–π–ª—ã:**
‚Ä¢ phrases.txt - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã
‚Ä¢ user_phrases.csv - —Ñ—Ä–∞–∑—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
‚Ä¢ users.txt - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

‚ú® –î–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ñ—Ä–∞–∑ —Å–º–æ—Ç—Ä–∏—Ç–µ data/user_phrases.csv"""
    
    await update.message.reply_text(stats_message)
    
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–¥–º–∏–Ω—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

async def admin_test_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if user_id != ADMIN_ID:
        logger.warning(f"üö´ –ù–µ-–∞–¥–º–∏–Ω {username} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {username} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    logger.info(f"üîç global_scheduler —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {global_scheduler is not None}")
    
    # –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∑–∞ –æ–±—ä–µ–∫—Ç
    if global_scheduler is not None:
        logger.info(f"üîç –¢–∏–ø global_scheduler: {type(global_scheduler)}")
        logger.info(f"üîç –ú–µ—Ç–æ–¥—ã global_scheduler: {dir(global_scheduler)}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if global_scheduler is not None:
        try:
            success = await global_scheduler.send_test_notification(user_id)
            
            if success:
                await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ test_notification: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        logger.warning(f"‚ùå global_scheduler is None")
        await update.message.reply_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

async def admin_moderate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∑"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {username} –∑–∞–ø—Ä–æ—Å–∏–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é —Ñ—Ä–∞–∑")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–∑—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    moderation_message = format_pending_phrases_for_admin(limit=5)
    
    await update.message.reply_text(moderation_message)
    logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

async def admin_moderation_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_moderation_stats()
    top_contributors = get_top_contributors()
    
    stats_message = f"""üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–î–ï–†–ê–¶–ò–ò**

üîÑ **–û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏:**
‚è≥ –û–∂–∏–¥–∞—é—Ç: {stats['total_pending']}
‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['total_approved']}
‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['total_rejected']}
üìà –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['recent_submissions']}

üë• **–¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤:**"""
    
    if top_contributors:
        for i, (username, count) in enumerate(top_contributors[:5]):
            stats_message += f"\n{i+1}. {username}: {count} —Ñ—Ä–∞–∑"
    else:
        stats_message += "\n–ü–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑"
    
    stats_message += f"""

üîß **–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏:**
/moderate - —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑
/approve_all - –æ–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ
/stats_moderation - —ç—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    
    await update.message.reply_text(stats_message)
    logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")

async def admin_approve_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ñ—Ä–∞–∑"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {username} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–∞–∫–µ—Ç–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
    approved_count, error_count = batch_approve_pending(max_count=10)
    
    if approved_count > 0:
        await update.message.reply_text(
            f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ {approved_count} —Ñ—Ä–∞–∑ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–æ—Ç–∞—Ü–∏—é!\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n\n"
            f"–§—Ä–∞–∑—ã –ø—Ä–æ—à–ª–∏ –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞."
        )
        logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–æ {approved_count} —Ñ—Ä–∞–∑")
    else:
        await update.message.reply_text(
            "üìù –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ—Ä–∞–∑ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
        logger.info("üìù –ù–µ—Ç —Ñ—Ä–∞–∑ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è")

async def admin_security_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {username} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    stats = security_manager.get_security_stats()
    
    security_message = f"""üîê **–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ë–û–¢–ê**

üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {stats['blocked_users']}
üë• **–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {stats['active_users_tracked']}
üîç **–ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:** {stats['suspicious_patterns_count']}

‚ö° **–õ–∏–º–∏—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏:**
üì± –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å: {stats['rate_limits']['messages_per_hour']}
üí¨ –§—Ä–∞–∑ –≤ –¥–µ–Ω—å: {stats['rate_limits']['phrases_per_day']}
‚å®Ô∏è –ö–æ–º–∞–Ω–¥ –≤ –º–∏–Ω—É—Ç—É: {stats['rate_limits']['commands_per_minute']}

üõ°Ô∏è **–ó–∞—â–∏—Ç–∞ –≤–∫–ª—é—á–∞–µ—Ç:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞
‚Ä¢ Rate limiting (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã)
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π

üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
/unblock [user_id] - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/block [user_id] - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    await update.message.reply_text(security_message)
    logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

async def admin_reschedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
    user = update.effective_user
    user_id = user.id
    username = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if user_id != ADMIN_ID:
        logger.warning(f"üö´ –ù–µ-–∞–¥–º–∏–Ω {username} –ø—ã—Ç–∞–ª—Å—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    logger.info(f"üëë –ê–¥–º–∏–Ω {username} –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
    logger.info(f"üîç global_scheduler —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {global_scheduler is not None}")
    
    # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏
    if global_scheduler is not None:
        try:
            global_scheduler.reschedule_notifications()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            next_times = global_scheduler.get_next_notifications()
            
            await update.message.reply_text(
                f"üîÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"‚è∞ –ù–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {', '.join(next_times)}"
            )
            logger.info("‚úÖ –†–∞—Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üìÖ –ù–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞: {', '.join(next_times)}")
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ reschedule: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        logger.warning(f"‚ùå global_scheduler is None –≤ reschedule")
        await update.message.reply_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
# moderation.py - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∑

import csv
import logging
import os
from datetime import datetime
from typing import List, Dict, Tuple

from config import USER_PHRASES_FILE, PHRASES_FILE

logger = logging.getLogger(__name__)

def get_pending_phrases() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ—Ä–∞–∑—ã –æ–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    pending_phrases = []
    
    try:
        if not os.path.exists(USER_PHRASES_FILE):
            return []
        
        with open(USER_PHRASES_FILE, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                if row.get('status') == 'pending':
                    pending_phrases.append({
                        'id': len(pending_phrases),  # –ü—Ä–æ—Å—Ç–æ–π ID –¥–ª—è —Å—Å—ã–ª–∫–∏
                        'date': row.get('date', ''),
                        'user_id': row.get('user_id', ''),
                        'username': row.get('username', ''),
                        'phrase': row.get('phrase', ''),
                        'status': row.get('status', '')
                    })
        
        logger.info(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pending_phrases)} —Ñ—Ä–∞–∑ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        return pending_phrases
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–∑ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        return []

def get_phrases_by_status(status: str) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É (pending, approved, rejected)"""
    phrases = []
    
    try:
        if not os.path.exists(USER_PHRASES_FILE):
            return []
        
        with open(USER_PHRASES_FILE, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                if row.get('status') == status:
                    phrases.append({
                        'date': row.get('date', ''),
                        'user_id': row.get('user_id', ''),
                        'username': row.get('username', ''),
                        'phrase': row.get('phrase', ''),
                        'status': row.get('status', '')
                    })
        
        return phrases
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status}: {e}")
        return []

def update_phrase_status(phrase_text: str, new_status: str, moderator_note: str = "") -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ—Ä–∞–∑—ã"""
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        rows = []
        updated = False
        
        with open(USER_PHRASES_FILE, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            fieldnames = reader.fieldnames
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if 'moderator_note' not in fieldnames:
                fieldnames.append('moderator_note')
            if 'moderation_date' not in fieldnames:
                fieldnames.append('moderation_date')
            
            for row in reader:
                if row['phrase'] == phrase_text and row['status'] == 'pending':
                    row['status'] = new_status
                    row['moderator_note'] = moderator_note
                    row['moderation_date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    updated = True
                    logger.info(f"üìù –û–±–Ω–æ–≤–∏–ª–∏ —Å—Ç–∞—Ç—É—Å —Ñ—Ä–∞–∑—ã '{phrase_text[:30]}...' –Ω–∞ '{new_status}'")
                
                rows.append(row)
        
        if not updated:
            logger.warning(f"‚ö†Ô∏è –§—Ä–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: '{phrase_text[:30]}...'")
            return False
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(USER_PHRASES_FILE, 'w', encoding='utf-8', newline='') as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(rows)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ñ—Ä–∞–∑—ã: {e}")
        return False

def approve_phrase(phrase_text: str, add_to_rotation: bool = True) -> bool:
    """–û–¥–æ–±—Ä—è–µ–º —Ñ—Ä–∞–∑—É –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–æ—Ç–∞—Ü–∏—é"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if not update_phrase_status(phrase_text, 'approved', '–û–¥–æ–±—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º'):
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–æ—Ç–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if add_to_rotation:
            with open(PHRASES_FILE, 'a', encoding='utf-8') as f:
                f.write(phrase_text + '\n')
            
            logger.info(f"‚úÖ –§—Ä–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–æ—Ç–∞—Ü–∏—é: '{phrase_text[:30]}...'")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã: {e}")
        return False

def reject_phrase(phrase_text: str, reason: str = "–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º") -> bool:
    """–û—Ç–∫–ª–æ–Ω—è–µ–º —Ñ—Ä–∞–∑—É"""
    return update_phrase_status(phrase_text, 'rejected', reason)

def get_moderation_stats() -> Dict:
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    stats = {
        'total_pending': 0,
        'total_approved': 0,
        'total_rejected': 0,
        'recent_submissions': 0  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    }
    
    try:
        if not os.path.exists(USER_PHRASES_FILE):
            return stats
        
        recent_date = (datetime.now() - datetime.timedelta(days=7)).strftime("%Y-%m-%d")
        
        with open(USER_PHRASES_FILE, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                status = row.get('status', '')
                date = row.get('date', '')
                
                if status == 'pending':
                    stats['total_pending'] += 1
                elif status == 'approved':
                    stats['total_approved'] += 1
                elif status == 'rejected':
                    stats['total_rejected'] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º recent submissions
                if date >= recent_date:
                    stats['recent_submissions'] += 1
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {stats}")
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        return stats

def format_pending_phrases_for_admin(limit: int = 5) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    pending = get_pending_phrases()
    
    if not pending:
        return "‚úÖ –ù–µ—Ç —Ñ—Ä–∞–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏!"
    
    message = f"üìù **–§—Ä–∞–∑—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ({len(pending)} –≤—Å–µ–≥–æ):**\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ
    for i, phrase_data in enumerate(pending[:limit]):
        date = phrase_data['date'][:10]  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        username = phrase_data['username']
        phrase = phrase_data['phrase']
        
        message += f"**{i+1}.** {phrase}\n"
        message += f"   üë§ {username} ‚Ä¢ üìÖ {date}\n\n"
    
    if len(pending) > limit:
        message += f"... –∏ –µ—â—ë {len(pending) - limit} —Ñ—Ä–∞–∑\n\n"
    
    message += "üîß **–ö–æ–º–∞–Ω–¥—ã:**\n"
    message += "/moderate - –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä\n"
    message += "/approve_all - –æ–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ\n"
    message += "/stats_moderation - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    
    return message

def get_top_contributors() -> List[Tuple[str, int]]:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑"""
    contributors = {}
    
    try:
        approved_phrases = get_phrases_by_status('approved')
        
        for phrase_data in approved_phrases:
            username = phrase_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            contributors[username] = contributors.get(username, 0) + 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        top_contributors = sorted(contributors.items(), key=lambda x: x[1], reverse=True)
        
        return top_contributors[:10]  # –¢–æ–ø 10
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∞–≤—Ç–æ—Ä–æ–≤: {e}")
        return []

def batch_approve_pending(max_count: int = 10) -> Tuple[int, int]:
    """–ü–∞–∫–µ—Ç–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Ñ—Ä–∞–∑ (–¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑)"""
    pending = get_pending_phrases()
    approved_count = 0
    error_count = 0
    
    for phrase_data in pending[:max_count]:
        phrase_text = phrase_data['phrase']
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        if len(phrase_text) < 10:  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è
            continue
        if phrase_text.count('!') > 3:  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
            continue
        
        if approve_phrase(phrase_text, add_to_rotation=True):
            approved_count += 1
            logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∞: '{phrase_text[:30]}...'")
        else:
            error_count += 1
    
    return approved_count, error_count
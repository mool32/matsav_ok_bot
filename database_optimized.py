# database_optimized.py - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å SQLite (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)

import asyncio
import aiosqlite
import logging
import os
import random
from datetime import datetime, timedelta
from typing import List, Set, Dict, Optional
from dataclasses import dataclass
import time

from config import PHRASES_FILE

logger = logging.getLogger(__name__)

@dataclass
class User:
    user_id: int
    username: str
    first_seen: datetime
    last_activity: datetime
    is_active: bool = True

@dataclass
class Phrase:
    id: int
    text: str
    source: str  # 'system' –∏–ª–∏ 'user'
    status: str  # 'active', 'pending', 'rejected'
    created_at: datetime
    user_id: Optional[int] = None

class OptimizedDatabase:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, db_path: str = "data/matsav_tov.db"):
        self.db_path = db_path
        self._phrase_cache = {}
        self._cache_timestamp = 0
        self._cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        os.makedirs(os.path.dirname(db_path), exist_ok=True)
    
    async def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º PRAGMA –≤–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            async with aiosqlite.connect(self.db_path) as db:
                # –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                await db.execute("PRAGMA journal_mode=WAL")
                await db.execute("PRAGMA synchronous=NORMAL") 
                await db.execute("PRAGMA cache_size=10000")
                await db.execute("PRAGMA temp_store=memory")
            
            # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –º–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            async with aiosqlite.connect(self.db_path) as db:
                await self._create_tables(db)
                await self._migrate_from_files(db)
                await db.commit()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
    
    async def _create_tables(self, db: aiosqlite.Connection):
        """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã"""
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active BOOLEAN DEFAULT 1,
                notification_count INTEGER DEFAULT 0
            )
        """)
        
        # –§—Ä–∞–∑—ã
        await db.execute("""
            CREATE TABLE IF NOT EXISTS phrases (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                text TEXT NOT NULL UNIQUE,
                source TEXT DEFAULT 'system',
                status TEXT DEFAULT 'active',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                user_id INTEGER,
                usage_count INTEGER DEFAULT 0,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        """)
        
        # –õ–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await db.execute("""
            CREATE TABLE IF NOT EXISTS notification_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                phrase_id INTEGER NOT NULL,
                sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'sent',
                error_message TEXT,
                retry_count INTEGER DEFAULT 0,
                FOREIGN KEY (user_id) REFERENCES users (user_id),
                FOREIGN KEY (phrase_id) REFERENCES phrases (id)
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await db.execute("CREATE INDEX IF NOT EXISTS idx_users_active ON users(is_active)")
        await db.execute("CREATE INDEX IF NOT EXISTS idx_phrases_status ON phrases(status)")
        await db.execute("CREATE INDEX IF NOT EXISTS idx_notifications_status ON notification_logs(status)")
        await db.execute("CREATE INDEX IF NOT EXISTS idx_notifications_user ON notification_logs(user_id)")
    
    async def _migrate_from_files(self, db: aiosqlite.Connection):
        """–ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
            cursor = await db.execute("SELECT COUNT(*) FROM phrases")
            count = await cursor.fetchone()
            if count[0] > 0:
                return  # –î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ —Ñ–∞–π–ª–∞
            if os.path.exists(PHRASES_FILE):
                with open(PHRASES_FILE, 'r', encoding='utf-8') as f:
                    phrases = [line.strip() for line in f if line.strip()]
                
                for phrase in phrases:
                    await db.execute(
                        "INSERT OR IGNORE INTO phrases (text, source, status) VALUES (?, ?, ?)",
                        (phrase, 'system', 'active')
                    )
                
                logger.info(f"üì• –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–ª–∏ {len(phrases)} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ—Ä–∞–∑")
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
            users_file = "data/users.txt"
            if os.path.exists(users_file):
                with open(users_file, 'r', encoding='utf-8') as f:
                    user_ids = [int(line.strip()) for line in f if line.strip().isdigit()]
                
                for user_id in user_ids:
                    await db.execute(
                        "INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
                        (user_id, f"User_{user_id}")
                    )
                
                logger.info(f"üì• –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–ª–∏ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
    
    async def add_user(self, user_id: int, username: str = None) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT OR REPLACE INTO users 
                    (user_id, username, last_activity) 
                    VALUES (?, ?, CURRENT_TIMESTAMP)
                """, (user_id, username or f"User_{user_id}"))
                await db.commit()
            
            logger.info(f"üë§ –î–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    async def get_active_users(self) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                cursor = await db.execute(
                    "SELECT user_id FROM users WHERE is_active = 1"
                )
                users = await cursor.fetchall()
                return [user[0] for user in users]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    async def get_random_phrase(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            current_time = time.time()
            if (current_time - self._cache_timestamp) > self._cache_ttl or not self._phrase_cache:
                await self._refresh_phrase_cache()
            
            if not self._phrase_cache:
                return "–¢—ã –Ω–µ –æ–¥–∏–Ω. ◊û◊¶◊ë ◊ò◊ï◊ë."
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
            phrase_data = random.choice(list(self._phrase_cache.values()))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            asyncio.create_task(self._increment_phrase_usage(phrase_data['id']))
            
            return phrase_data['text']
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã: {e}")
            return "–¢—ã –Ω–µ –æ–¥–∏–Ω. ◊û◊¶◊ë ◊ò◊ï◊ë."
    
    async def _refresh_phrase_cache(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ñ—Ä–∞–∑"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                cursor = await db.execute(
                    "SELECT id, text FROM phrases WHERE status = 'active'"
                )
                phrases = await cursor.fetchall()
                
                self._phrase_cache = {
                    phrase[0]: {'id': phrase[0], 'text': phrase[1]} 
                    for phrase in phrases
                }
                self._cache_timestamp = time.time()
                
                logger.info(f"üîÑ –ö—ç—à —Ñ—Ä–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(self._phrase_cache)} —Ñ—Ä–∞–∑")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {e}")
    
    async def _increment_phrase_usage(self, phrase_id: int):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    "UPDATE phrases SET usage_count = usage_count + 1 WHERE id = ?",
                    (phrase_id,)
                )
                await db.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: {e}")
    
    async def save_user_phrase(self, user_id: int, username: str, phrase: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∑—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT INTO phrases (text, source, status, user_id) 
                    VALUES (?, 'user', 'pending', ?)
                """, (phrase, user_id))
                await db.commit()
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ñ—Ä–∞–∑—É –æ—Ç {username}: '{phrase[:50]}...'")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã: {e}")
            return False
    
    async def log_notification(self, user_id: int, phrase_id: int, status: str, error: str = None):
        """–õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute("""
                    INSERT INTO notification_logs 
                    (user_id, phrase_id, status, error_message) 
                    VALUES (?, ?, ?, ?)
                """, (user_id, phrase_id, status, error))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if status == 'sent':
                    await db.execute(
                        "UPDATE users SET notification_count = notification_count + 1 WHERE user_id = ?",
                        (user_id,)
                    )
                
                await db.commit()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def mark_user_inactive(self, user_id: int):
        """–ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                await db.execute(
                    "UPDATE users SET is_active = 0 WHERE user_id = ?",
                    (user_id,)
                )
                await db.commit()
            
            logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    async def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                cursor = await db.execute("SELECT COUNT(*) FROM users WHERE is_active = 1")
                active_users = (await cursor.fetchone())[0]
                
                cursor = await db.execute("SELECT COUNT(*) FROM users")
                total_users = (await cursor.fetchone())[0]
                
                # –§—Ä–∞–∑—ã
                cursor = await db.execute("SELECT COUNT(*) FROM phrases WHERE status = 'active'")
                active_phrases = (await cursor.fetchone())[0]
                
                cursor = await db.execute("SELECT COUNT(*) FROM phrases WHERE status = 'pending'")
                pending_phrases = (await cursor.fetchone())[0]
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                cursor = await db.execute("""
                    SELECT COUNT(*) FROM notification_logs 
                    WHERE sent_at > datetime('now', '-1 day') AND status = 'sent'
                """)
                notifications_24h = (await cursor.fetchone())[0]
                
                # –ù–µ—É–¥–∞—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                cursor = await db.execute("SELECT COUNT(*) FROM notification_logs WHERE status = 'failed'")
                failed_notifications = (await cursor.fetchone())[0]
                
                return {
                    'active_users': active_users,
                    'total_users': total_users,
                    'active_phrases': active_phrases,
                    'pending_phrases': pending_phrases,
                    'notifications_24h': notifications_24h,
                    'failed_notifications': failed_notifications,
                    'cache_size': len(self._phrase_cache)
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ë–î
optimized_db = OptimizedDatabase()
# load_test.py - –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞

import asyncio
import aiosqlite
import time
import random
import logging
from datetime import datetime
from typing import List, Dict
import psutil
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('load_test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class LoadTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    
    def __init__(self, db_path: str = "data/matsav_tov.db"):
        self.db_path = db_path
        self.test_results = {
            'users_created': 0,
            'phrases_retrieved': 0,
            'avg_response_time': 0,
            'errors': 0,
            'memory_usage': [],
            'cpu_usage': []
        }
    
    async def create_test_users(self, count: int) -> List[int]:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î"""
        logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        start_time = time.time()
        user_ids = []
        
        try:
            async with aiosqlite.connect(self.db_path) as db:
                for i in range(count):
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID (–Ω–∞—á–∏–Ω–∞—è —Å 1000000)
                    user_id = 1000000 + i
                    username = f"LoadTest_User_{i}"
                    
                    await db.execute("""
                        INSERT OR REPLACE INTO users 
                        (user_id, username, is_active) 
                        VALUES (?, ?, 1)
                    """, (user_id, username))
                    
                    user_ids.append(user_id)
                    
                    if (i + 1) % 100 == 0:
                        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {i + 1}/{count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                await db.commit()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
        
        elapsed = time.time() - start_time
        self.test_results['users_created'] = count
        
        logger.info(f"‚úÖ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–æ –∑–∞ {elapsed:.2f}—Å")
        return user_ids
    
    async def test_phrase_retrieval(self, user_count: int, iterations: int = 1000) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä–∞–∑"""
        logger.info(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä–∞–∑ ({iterations} –∑–∞–ø—Ä–æ—Å–æ–≤)")
        
        start_time = time.time()
        successful_requests = 0
        errors = 0
        response_times = []
        
        try:
            async with aiosqlite.connect(self.db_path) as db:
                for i in range(iterations):
                    request_start = time.time()
                    
                    try:
                        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑—ã
                        cursor = await db.execute(
                            "SELECT text FROM phrases WHERE status = 'active' ORDER BY RANDOM() LIMIT 1"
                        )
                        phrase = await cursor.fetchone()
                        
                        if phrase:
                            successful_requests += 1
                        else:
                            errors += 1
                            
                    except Exception as e:
                        errors += 1
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i}: {e}")
                    
                    request_time = time.time() - request_start
                    response_times.append(request_time)
                    
                    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤
                    if (i + 1) % 100 == 0:
                        avg_time = sum(response_times[-100:]) / 100
                        logger.info(f"üìä {i + 1}/{iterations} - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time*1000:.1f}ms")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                    await asyncio.sleep(0.001)
        
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        elapsed = time.time() - start_time
        avg_response_time = sum(response_times) / len(response_times) if response_times else 0
        
        results = {
            'total_requests': iterations,
            'successful_requests': successful_requests,
            'errors': errors,
            'total_time': elapsed,
            'avg_response_time': avg_response_time,
            'requests_per_second': iterations / elapsed if elapsed > 0 else 0,
            'min_response_time': min(response_times) if response_times else 0,
            'max_response_time': max(response_times) if response_times else 0
        }
        
        self.test_results.update(results)
        return results
    
    async def simulate_batch_notification(self, user_ids: List[int]) -> Dict:
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –±–∞—Ç—á-—Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info(f"üì§ –°–∏–º—É–ª—è—Ü–∏—è –±–∞—Ç—á-—Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        batch_size = 50  # –ö–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ
        batch_delay = 0.5
        message_delay = 0.03
        
        start_time = time.time()
        total_sent = 0
        total_failed = 0
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
        batches = [user_ids[i:i + batch_size] for i in range(0, len(user_ids), batch_size)]
        
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–∑—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
                cursor = await db.execute(
                    "SELECT id, text FROM phrases WHERE status = 'active' ORDER BY RANDOM() LIMIT 1"
                )
                phrase_data = await cursor.fetchone()
                
                if not phrase_data:
                    logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                    return {}
                
                phrase_id, phrase_text = phrase_data
                logger.info(f"üíå –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—Ä–∞–∑—É: '{phrase_text[:50]}...'")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∏
                for batch_num, batch_users in enumerate(batches, 1):
                    batch_start = time.time()
                    logger.info(f"üì¶ –ë–∞—Ç—á {batch_num}/{len(batches)} ({len(batch_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
                    
                    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ "–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º" —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞—Ç—á–µ
                    tasks = []
                    for user_id in batch_users:
                        task = self._simulate_send_message(db, user_id, phrase_id)
                        tasks.append(task)
                    
                    # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –±–∞—Ç—á–µ
                    results = await asyncio.gather(*tasks, return_exceptions=True)
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for result in results:
                        if isinstance(result, Exception):
                            total_failed += 1
                        elif result:
                            total_sent += 1
                        else:
                            total_failed += 1
                    
                    batch_time = time.time() - batch_start
                    logger.info(f"‚úÖ –ë–∞—Ç—á {batch_num} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {batch_time:.2f}—Å")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                    if batch_num < len(batches):
                        await asyncio.sleep(batch_delay)
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        
        elapsed = time.time() - start_time
        
        results = {
            'total_users': len(user_ids),
            'sent_count': total_sent,
            'failed_count': total_failed,
            'success_rate': (total_sent / len(user_ids)) * 100 if user_ids else 0,
            'total_time': elapsed,
            'messages_per_second': len(user_ids) / elapsed if elapsed > 0 else 0
        }
        
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:")
        logger.info(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {results['total_users']}")
        logger.info(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {results['sent_count']}")
        logger.info(f"   ‚ùå –û—à–∏–±–æ–∫: {results['failed_count']}")
        logger.info(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {results['success_rate']:.1f}%")
        logger.info(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {results['messages_per_second']:.1f} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫")
        
        return results
    
    async def _simulate_send_message(self, db: aiosqlite.Connection, user_id: int, phrase_id: int) -> bool:
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram API
            await asyncio.sleep(0.03)
            
            # –õ–æ–≥–∏—Ä—É–µ–º "–æ—Ç–ø—Ä–∞–≤–∫—É"
            await db.execute("""
                INSERT INTO notification_logs 
                (user_id, phrase_id, status) 
                VALUES (?, ?, 'sent')
            """, (user_id, phrase_id))
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
            return False
    
    def monitor_system_resources(self) -> Dict:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            memory = psutil.virtual_memory()
            cpu = psutil.cpu_percent(interval=1)
            disk = psutil.disk_usage('/')
            
            resources = {
                'memory_percent': memory.percent,
                'memory_used_mb': memory.used / 1024 / 1024,
                'memory_total_mb': memory.total / 1024 / 1024,
                'cpu_percent': cpu,
                'disk_percent': disk.percent,
                'disk_free_gb': disk.free / 1024 / 1024 / 1024
            }
            
            self.test_results['memory_usage'].append(memory.percent)
            self.test_results['cpu_usage'].append(cpu)
            
            return resources
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
            return {}
    
    async def cleanup_test_users(self, user_ids: List[int]):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ {len(user_ids)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        try:
            async with aiosqlite.connect(self.db_path) as db:
                # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                await db.execute(
                    f"DELETE FROM notification_logs WHERE user_id IN ({','.join(['?'] * len(user_ids))})",
                    user_ids
                )
                
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await db.execute(
                    f"DELETE FROM users WHERE user_id IN ({','.join(['?'] * len(user_ids))})",
                    user_ids
                )
                
                await db.commit()
                
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    def print_final_report(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print("\n" + "="*60)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        print(f"üë• –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.test_results['users_created']}")
        print(f"üéØ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {self.test_results.get('successful_requests', 0)}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.test_results.get('errors', 0)}")
        print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {self.test_results.get('avg_response_time', 0)*1000:.1f}ms")
        print(f"üìà –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {self.test_results.get('requests_per_second', 0):.1f}")
        
        if self.test_results['memory_usage']:
            avg_memory = sum(self.test_results['memory_usage']) / len(self.test_results['memory_usage'])
            max_memory = max(self.test_results['memory_usage'])
            print(f"üíæ –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {avg_memory:.1f}%")
            print(f"üíæ –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {max_memory:.1f}%")
        
        if self.test_results['cpu_usage']:
            avg_cpu = sum(self.test_results['cpu_usage']) / len(self.test_results['cpu_usage'])
            max_cpu = max(self.test_results['cpu_usage'])
            print(f"üî• –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {avg_cpu:.1f}%")
            print(f"üî• –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {max_cpu:.1f}%")
        
        print("="*60)

async def run_load_test():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–ê–ü–£–°–ö –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    tester = LoadTester()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
    test_configs = [
        {'users': 100, 'name': '–ú–∞–ª–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞'},
        {'users': 500, 'name': '–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞'},
        {'users': 1000, 'name': '–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞'},
    ]
    
    for config in test_configs:
        user_count = config['users']
        test_name = config['name']
        
        print(f"\nüéØ {test_name} ({user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
        print("-" * 40)
        
        try:
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ —Ç–µ—Å—Ç–∞
            resources_before = tester.monitor_system_resources()
            logger.info(f"üìä –†–µ—Å—É—Ä—Å—ã –¥–æ —Ç–µ—Å—Ç–∞: CPU {resources_before.get('cpu_percent', 0):.1f}%, "
                       f"RAM {resources_before.get('memory_percent', 0):.1f}%")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_ids = await tester.create_test_users(user_count)
            
            if not user_ids:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞ {test_name}")
                continue
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä–∞–∑
            phrase_results = await tester.test_phrase_retrieval(user_count, iterations=200)
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
            notification_results = await tester.simulate_batch_notification(user_ids)
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
            resources_after = tester.monitor_system_resources()
            logger.info(f"üìä –†–µ—Å—É—Ä—Å—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞: CPU {resources_after.get('cpu_percent', 0):.1f}%, "
                       f"RAM {resources_after.get('memory_percent', 0):.1f}%")
            
            # –û—á–∏—Å—Ç–∫–∞
            await tester.cleanup_test_users(user_ids)
            
            print(f"‚úÖ {test_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(2)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    tester.print_final_report()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists("data/matsav_tov.db"):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–ª—Å—è —Ö–æ—Ç—è –±—ã —Ä–∞–∑.")
        exit(1)
    
    asyncio.run(run_load_test())
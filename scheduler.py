# scheduler.py - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Ñ—Ä–∞–∑

import asyncio
import logging
import random
from datetime import datetime, time
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram.error import TelegramError

from config import DAILY_NOTIFICATIONS
from database import get_random_phrase, get_all_users

logger = logging.getLogger(__name__)

class NotificationScheduler:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π"""
    
    def __init__(self, bot_application):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.bot = bot_application.bot
        self.scheduler = AsyncIOScheduler()
        self.notification_count = 0
        
        logger.info("üìÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞—Å—Å—ã–ª–æ–∫"""
        try:
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            self.schedule_daily_notifications()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler.start()
            
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–ø—É—â–µ–Ω")
            logger.info(f"üéØ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {DAILY_NOTIFICATIONS} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥–µ–Ω—å")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def schedule_daily_notifications(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"""
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
        time_slots = [
            (9, 11),   # –£—Ç—Ä–æ: 9:00-11:00
            (12, 14),  # –û–±–µ–¥: 12:00-14:00
            (15, 17),  # –î–µ–Ω—å: 15:00-17:00
            (18, 20),  # –í–µ—á–µ—Ä: 18:00-20:00
            (21, 22),  # –ü–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä: 21:00-22:00
        ]
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞
        for i in range(DAILY_NOTIFICATIONS):
            if i < len(time_slots):
                start_hour, end_hour = time_slots[i]
            else:
                # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∞—Å—ã
                start_hour, end_hour = random.choice(time_slots)
            
            # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
            random_hour = random.randint(start_hour, end_hour)
            random_minute = random.randint(0, 59)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler.add_job(
                self.send_daily_notification,
                trigger=CronTrigger(hour=random_hour, minute=random_minute),
                id=f"daily_notification_{i}",
                replace_existing=True,
                max_instances=1
            )
            
            logger.info(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{i+1} –Ω–∞ {random_hour:02d}:{random_minute:02d}")
    
    async def send_daily_notification(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = get_all_users()
            
            if not users:
                logger.warning("üë• –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
            phrase = get_random_phrase()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            notification_message = f"üì¢ ◊û◊¶◊ë ◊ò◊ï◊ë: {phrase}"
            
            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            sent_count = 0
            error_count = 0
            
            logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            logger.info(f"üíå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: '{phrase[:50]}...'")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for user_id in users:
                try:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=notification_message
                    )
                    sent_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (—á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ª–∏–º–∏—Ç—ã Telegram)
                    await asyncio.sleep(0.1)
                    
                except TelegramError as e:
                    error_count += 1
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –º–æ–∂–Ω–æ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞
                    if "blocked" in str(e).lower():
                        logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                        # TODO: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                
                except Exception as e:
                    error_count += 1
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏
            self.notification_count += 1
            
            logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ #{self.notification_count} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            logger.info(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {error_count}")
            
            if sent_count > 0:
                logger.info(f"üéâ {sent_count} —á–µ–ª–æ–≤–µ–∫ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ—Ä—Ü–∏—é —Ç–µ–ø–ª–∞!")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
    
    async def send_test_notification(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        try:
            phrase = get_random_phrase()
            test_message = f"üß™ –¢–ï–°–¢: ◊û◊¶◊ë ◊ò◊ï◊ë: {phrase}"
            
            await self.bot.send_message(
                chat_id=user_id,
                text=test_message
            )
            
            logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def get_next_notifications(self):
        """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∞—Ö"""
        try:
            jobs = self.scheduler.get_jobs()
            
            next_times = []
            for job in jobs:
                if job.id.startswith("daily_notification"):
                    next_run = job.next_run_time
                    if next_run:
                        next_times.append(next_run.strftime("%H:%M"))
            
            next_times.sort()
            return next_times
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return []
    
    def reschedule_notifications(self):
        """–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫)"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
            for job in self.scheduler.get_jobs():
                if job.id.startswith("daily_notification"):
                    job.remove()
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
            self.schedule_daily_notifications()
            
            logger.info("üîÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        try:
            self.scheduler.shutdown(wait=False)
            logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    def get_stats(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–æ–∫"""
        return {
            "total_notifications": self.notification_count,
            "scheduled_jobs": len([j for j in self.scheduler.get_jobs() if j.id.startswith("daily_notification")]),
            "is_running": self.scheduler.running
        }
# database.py - –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö

import os
import csv
import random
import logging
from datetime import datetime
from typing import List, Set
from config import PHRASES_FILE, USER_PHRASES_FILE, USERS_FILE

logger = logging.getLogger(__name__)

def init_data_files():
    """–°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("data", exist_ok=True)
    logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –ø–∞–ø–∫—É data")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏
    if not os.path.exists(PHRASES_FILE):
        initial_phrases = [
            "–¢—ã –Ω–µ –æ–±—è–∑–∞–Ω –±—ã—Ç—å —Å–∏–ª—å–Ω—ã–º –≤—Å—ë –≤—Ä–µ–º—è.",
            "–í–æ—Ç —Ç—ã —á–∏—Ç–∞–µ—à—å —ç—Ç–æ ‚Äî –∏ —É–∂–µ –Ω–µ –æ–¥–∏–Ω.",
            "–ò–Ω–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–¥–æ—Ö ‚Äî —É–∂–µ –ø–æ–¥–≤–∏–≥.",
            "–¢–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã –∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –±—ã—Ç—å.",
            "–û—à–∏–±–∫–∏ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–ø—ã—Ç —Å –¥—Ä—É–≥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.",
            "–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å 100% —Å–≤–æ–∏—Ö –ø–ª–æ—Ö–∏—Ö –¥–Ω–µ–π –¥–æ —Å–∏—Ö –ø–æ—Ä.",
            "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ —Ç–æ–∂–µ –≤–µ–¥—É—Ç –∫ —Ü–µ–ª–∏.",
            "–°–µ–≥–æ–¥–Ω—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—Ä—É–¥–Ω–æ, –Ω–æ –∑–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å.",
            "–¢—ã –±–æ–ª–µ–µ —Å–º–µ–ª—ã–π, —á–µ–º –¥—É–º–∞–µ—à—å.",
            "–ü—Ä–æ—Å—Ç–æ –±—ã—Ç—å –∑–¥–µ—Å—å ‚Äî —É–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ.",
            "–¢–≤–æ—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –º–∏—Ä–µ —á—Ç–æ-—Ç–æ –º–µ–Ω—è–µ—Ç.",
            "–û—Ç–¥—ã—Ö ‚Äî —ç—Ç–æ –Ω–µ –ª–µ–Ω—å, —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å.",
            "–¢—ã —Ä–∞—Å—Ç—ë—à—å –¥–∞–∂–µ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —ç—Ç–æ–≥–æ –Ω–µ —á—É–≤—Å—Ç–≤—É–µ—à—å.",
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã –¥–µ–ª–∞–µ—à—å —Ç–æ, —á—Ç–æ –º–æ–∂–µ—à—å.",
            "–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞."
        ]
        
        with open(PHRASES_FILE, 'w', encoding='utf-8') as f:
            for phrase in initial_phrases:
                f.write(phrase + '\n')
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–ª–∏ —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏: {PHRASES_FILE} ({len(initial_phrases)} —Ñ—Ä–∞–∑)")
    else:
        logger.info(f"üìÑ –§–∞–π–ª —Å —Ñ—Ä–∞–∑–∞–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {PHRASES_FILE}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—Ä–∞–∑ (CSV)
    if not os.path.exists(USER_PHRASES_FILE):
        with open(USER_PHRASES_FILE, 'w', encoding='utf-8', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(['date', 'user_id', 'username', 'phrase', 'status'])
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–ª–∏ CSV —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—Ä–∞–∑: {USER_PHRASES_FILE}")
    else:
        logger.info(f"üìÑ CSV —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—Ä–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {USER_PHRASES_FILE}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            pass  # –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–ª–∏ —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {USERS_FILE}")
    else:
        logger.info(f"üìÑ –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {USERS_FILE}")

def get_random_phrase() -> str:
    """–ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(PHRASES_FILE, 'r', encoding='utf-8') as f:
            phrases = [line.strip() for line in f if line.strip()]
        
        if not phrases:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª —Å —Ñ—Ä–∞–∑–∞–º–∏ –ø—É—Å—Ç!")
            return "–¢—ã –Ω–µ –æ–¥–∏–Ω. ◊û◊¶◊ë ◊ò◊ï◊ë."
        
        selected_phrase = random.choice(phrases)
        logger.info(f"üé≤ –í—ã–±—Ä–∞–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É: '{selected_phrase[:30]}...'")
        
        return selected_phrase
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ—Ä–∞–∑: {e}")
        return "–¢—ã –Ω–µ –æ–¥–∏–Ω. ◊û◊¶◊ë ◊ò◊ï◊ë."

def save_user_phrase(user_id: int, username: str, phrase: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∑—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CSV"""
    try:
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        with open(USER_PHRASES_FILE, 'a', encoding='utf-8', newline='') as f:
            writer = csv.writer(f)
            writer.writerow([current_time, user_id, username, phrase, 'pending'])
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ñ—Ä–∞–∑—É –æ—Ç {username} (ID: {user_id}): '{phrase[:50]}...'")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ—Ä–∞–∑—ã: {e}")
        return False

def add_user(user_id: int, username: str = None) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫"""
    try:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        existing_users = get_all_users()
        
        if user_id in existing_users:
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with open(USERS_FILE, 'a', encoding='utf-8') as f:
            f.write(f"{user_id}\n")
        
        logger.info(f"üÜï –î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username} (ID: {user_id})")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def get_all_users() -> Set[int]:
    """–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        if not os.path.exists(USERS_FILE):
            return set()
        
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            users = set()
            for line in f:
                try:
                    user_id = int(line.strip())
                    users.add(user_id)
                except ValueError:
                    continue
        
        logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∏–ª–∏ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return users
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return set()

def get_phrases_count() -> int:
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—Ä–∞–∑"""
    try:
        with open(PHRASES_FILE, 'r', encoding='utf-8') as f:
            count = len([line for line in f if line.strip()])
        
        logger.info(f"üìä –í –±–∞–∑–µ {count} —Ñ—Ä–∞–∑")
        return count
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ñ—Ä–∞–∑: {e}")
        return 0

def get_pending_phrases_count() -> int:
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        with open(USER_PHRASES_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            count = sum(1 for row in reader if len(row) > 4 and row[4] == 'pending')
        
        logger.info(f"üìä –û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {count} —Ñ—Ä–∞–∑")
        return count
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ñ—Ä–∞–∑ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        return 0